#version 430
layout(local_size_x = 8, local_size_y = 8) in;
layout(std430, binding = 0) buffer pixelVec { vec4 pixel[]; };

uniform vec2 viewSize;
uniform vec2 viewSizeInv;

uniform vec3 origin;
uniform vec3 horizontal;
uniform vec3 vertical;
uniform vec3 lower_left_corner;

struct Ray
{
    vec3 orig;
    vec3 dir;
};

vec3 rayColor(Ray ray)
{
    float t = 0.5f * (normalize(ray.dir).y + 1.0f);
    vec3 white = vec3(1.0f, 1.0f, 1.0f);
    vec3 blue = vec3(0.5f, 0.7f, 1.0f);
    return (1.0f - t) * white + t * blue;
}

void main()
{
    uvec2 view = uvec2(viewSize);
    if (view.x > gl_GlobalInvocationID.x && view.y > gl_GlobalInvocationID.y)
    {
        vec2 uv = gl_GlobalInvocationID.xy * viewSizeInv;
        Ray ray;
        ray.orig = origin;
        ray.dir = lower_left_corner + uv.x * horizontal + uv.y * vertical - origin;
        pixel[gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * view.x] = vec4(rayColor(ray),1.0);
    }
}
