#version 430
layout(local_size_x = 8, local_size_y = 8) in;

float length_2(vec3 pos)
{
    return pos.x * pos.x + pos.y * pos.y + pos.z * pos.z;
}

#include ../common/random.glsl

struct Sphere
{
    vec3 center;
    float radius;
};

layout(std430, binding = 0) buffer pixelVec { vec4 pixel[]; };
layout(std430, binding = 1) buffer world { Sphere sphere []; };

uniform vec2 viewSize;
uniform vec2 viewSizeInv;

uniform vec3 origin;
uniform vec3 horizontal;
uniform vec3 vertical;
uniform vec3 lower_left_corner;
uniform int shpereNum;
uniform int currentFrame;
uniform int recursionDepth;

const int maxDepth = 30;
const float PI = 3.14159265358979323846;

struct Ray
{
    int maxDepth;
    vec2 tInterval;
    vec3 orig;
    vec3 dir;
};

struct HitRecord
{
    bool front_face;
    float t;
    vec3 p;
    vec3 normal;
};

vec3 rayAt(inout Ray ray, float time)
{
    return ray.orig + ray.dir * time;
}

//Sphere求交计算
bool HitSphere(Sphere sph, inout Ray ray, inout HitRecord rec)
{
    vec3 oc = ray.orig - sph.center;
    vec3 dir = ray.dir;
    float a = dot(dir, dir);
    float half_b = dot(oc, dir);
    float c = dot(oc, oc) - sph.radius * sph.radius;
    float discriminant = half_b * half_b - a * c;

    if (discriminant < 0) return false;

    float sqrtd = sqrt(discriminant);
    float root = (-half_b - sqrtd) / a;
    if (root < ray.tInterval.x || ray.tInterval.y < root)
    {
        root = (-half_b + sqrtd) / a;
        if (root < ray.tInterval.x || ray.tInterval.y < root)
            return false;
    }
     
    rec.t = root;
    rec.p = rayAt(ray, rec.t);
    vec3 outward_normal = (rec.p - sph.center) / sph.radius;
    rec.front_face = dot(ray.dir, outward_normal) < 0;
    rec.normal = rec.front_face ? outward_normal : -outward_normal;

    return true;
}
//场景求交
bool hitList(inout Ray ray, inout HitRecord rec)
{
    HitRecord temp_rec = rec;
    bool hitAnything = false;
 
    for (int i = 0; i < shpereNum; ++i)
    {
        if (HitSphere(sphere[i], ray, temp_rec))
        {
            hitAnything = true;
            ray.tInterval.y = temp_rec.t;
            rec = temp_rec;
        }
    }
    return hitAnything;
}
//ray Color
vec3 rayColor(Ray ray)
{
    ray.tInterval = vec2(0.0001, 99999.999);
    vec3 color[maxDepth + 1];
    int index = 0;
    while (true)
    {
        HitRecord rec;
        if (index >= ray.maxDepth)
        {
            color[0] = vec3(0.0);
            break;
        }
        else if (hitList(ray, rec))
        {
            ++index;
            ray.orig = rec.p;

            ray.dir = rec.normal + random_in_unit_sphere();

            ray.tInterval = vec2(0.0001, 99999.999);
            color[index] = vec3(0.5f);
        }
        else
        {
            float t = 0.5f * (normalize(ray.dir).y + 1.0);
            vec3 white = vec3(1.0, 1.0, 1.0);
            vec3 blue = vec3(0.5, 0.7, 1.0);
            color[0] = (1.0 - t) * white + t * blue;
            break;
        }
    }
    for (int i = 1; i <= index; ++i)
        color[0] *= color[i];
    return color[0];
}

Ray getRay(uint index)
{
    seed(index, currentFrame);
    float r1 = rand();
    float r2 = rand();
    float sq = sqrt(1.0 - r2);
    vec2 shake = vec2(cos(2.0 * PI * r1) * sq, sin(2.0 * PI * r1) * sq);
    vec2 uv = (gl_GlobalInvocationID.xy + shake) * viewSizeInv;

    Ray ray;
    ray.maxDepth = min(maxDepth, recursionDepth);
    ray.orig = origin;
    ray.dir = lower_left_corner + uv.x * horizontal + uv.y * vertical - origin;
    return ray;
}

void main()
{
    uvec2 view = uvec2(viewSize);
    if (view.x > gl_GlobalInvocationID.x && view.y > gl_GlobalInvocationID.y && currentFrame >= 0)
    {
        uint index = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * view.x;
        Ray ray = getRay(index);
        pixel[index] = (pixel[index] * currentFrame + vec4(rayColor(ray), 1.0)) / (currentFrame + 1);
    }
}
